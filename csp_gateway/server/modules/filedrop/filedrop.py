import logging
import os
from typing import Dict, List

import csp
from ccflow import BaseModel
from pydantic import Field

from csp_gateway.server import (
    GatewayChannels,
    GatewayModule,
)

from .adapter import FileDropAdapterConfiguration, FileDropType, filedrop_adapter_def

__all__ = (
    "ReadFileDropConfiguration",
    "ReadFileDrop",
)

log = logging.getLogger(__name__)


class ReadFileDropConfiguration(BaseModel):
    """The configuration of a filedrop adapter for a directory and filetype"""

    channel_name: str = Field(description="Name of the channel to send the structs to")
    filedrop_type: FileDropType = Field(description="The type of files to expect and accordingly read i.e. parquet, json, etc")
    field_map: Dict[str, str] = Field(
        default={}, description="A map to convert the keys in the data to the field names in the struct type of the channel"
    )
    extensions: List[str] = Field(default=[], description="List of extensions to decide which files to read, empty list means all extensions")
    subscribe_with_struct_id: bool = Field(
        default=False,
        description=("If False, replaces the id field on GatewayStructs from files with one autogenerated by the current Gateway."),
    )
    subscribe_with_struct_timestamp: bool = Field(
        default=False,
        description=("If False, replaces the timestamp field on the GatewayStruct with a timestamp autogenerated by the current Gateway."),
    )


class ReadFileDrop(GatewayModule):
    """The module to read data from files dropped in specific directories and send them as structs to specific channels"""

    directory_configs: Dict[str, List[ReadFileDropConfiguration]] = Field(
        description="Mapping of directories to a list of ReadFileDropConfiguration, for that directory in the filedrop module"
    )

    def connect(self, channels: GatewayChannels):
        channel_data = {}
        for dir, configs in self.directory_configs.items():
            # ensure that directories exist
            os.makedirs(dir, exist_ok=True)
            for config in configs:
                channel_data[config.channel_name] = []
        for dir, configs in self.directory_configs.items():
            for config in configs:
                type_adapter_args = {
                    "force_new_id": not config.subscribe_with_struct_id,
                    "force_new_timestamp": not config.subscribe_with_struct_timestamp,
                }
                adapter_config = FileDropAdapterConfiguration(
                    dir_path=dir,
                    filedrop_type=config.filedrop_type,
                    field_map=config.field_map,
                    extensions=config.extensions,
                    type_adapter_args=type_adapter_args,
                )
                channel_type = channels.get_outer_type(config.channel_name).typ
                data = filedrop_adapter_def(config=adapter_config, ts_typ=channel_type)
                channel_data[config.channel_name].append(data)
        for channel_name, data_list in channel_data.items():
            channels.set_channel(channel_name, csp.flatten(data_list))
